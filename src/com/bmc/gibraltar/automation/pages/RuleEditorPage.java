package com.bmc.gibraltar.automation.pages;

import com.bmc.gibraltar.automation.framework.utils.web.WebUtils;
import com.bmc.gibraltar.automation.items.element.ElementProperties;
import com.bmc.gibraltar.automation.items.element.Halo;
import com.bmc.gibraltar.automation.items.rule.ActiveRuleAction;
import com.bmc.gibraltar.automation.items.rule.RuleAction;
import com.bmc.gibraltar.automation.items.rule.RuleLink;
import com.bmc.gibraltar.automation.items.rule.TriggerEvent;
import com.bmc.gibraltar.automation.items.tab.PropertyTab;
import com.bmc.gibraltar.automation.items.tab.RuleInformationTab;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import ru.yandex.qatools.allure.annotations.Step;

import java.util.List;
import java.util.stream.Collectors;

public class RuleEditorPage extends EditorPage {
    private String triggerLocator = "css=.element.rx.RuleTrigger";
    private String triggerLabelOnCanvas = "//*[@class='autoGeneratedLabel']";
    private String textLineInLabel = "[@class='v-line']";
    private String haloOfActiveElement = canvasFreeSpace + "//div[@class='handles']/div";
    private String link = canvasFreeSpace + "//*[@class='link']";
    private String lastLinkOnCanvas = link + "[last()]";
    private String viewPort = canvasFreeSpace + "//*[@class='viewport']";
    private String recordDefinitionSection = "xpath=//div[@data-field='rxData/recordDefinitionNames']";
    private String primaryRecordDefinition = "xpath=//div[@data-field='rxData/recordDefinitionNames/0' " +
            "and ./label[.='Record Definition [Primary]']]//select";
    private String addRecordDefinitionButton = recordDefinitionSection + "//button[@class='btn-list-add']";
    private String lastRecordDefinitionDropdown = recordDefinitionSection + "//div[@class='list-item'][last()]//select";
    private String triggerEventSection = "xpath=//div[@class='rx-inspector-checkbox-multiselect' and .//label[.='Trigger Event:']]";
    private String triggerEventCheckbox = triggerEventSection + "//div[./label[.='%s']]//input[@type='checkbox']";
    private String triggerEvents = triggerEventSection + "//div[contains(@class, 'toggle')]//label";

    protected RuleEditorPage(WebDriver driver) {
        super(driver, "task-manager");
        definitionEditorName = "Rule Definition Editor";
    }

    public RuleEditorPage(WebDriver driver, String bundle) {
        super(driver, bundle);
    }

    @Override
    public String getPageUrl() {
        return APP_MANAGER_URL + String.format("/app/application/%s/rules/new", bundle);
    }

    public String getRuleName() {
        return name;
    }

    @Step
    public RuleEditorPage setRuleName(String ruleName) {
        new RuleInformationTab(wd).setProperty(ElementProperties.NAME, ruleName);
        name = ruleName;
        return this;
    }

    @Override
    public boolean isPageLoaded() {
        return waitForElementPresent(designerUiContainer, 10);
    }

    @Override
    protected void checkSuccessMessageWhileSavingDisplayed() {
        assertTrue(isSucessMessageDisplayed("Rule Definition saved successfully."));
    }

    public boolean isTriggerElementPresent() {
        return isElementPresent(triggerLocator);
    }

    @Step
    public RuleDefinitionsTabPage closeRule() {
        return closeEditor(new RuleDefinitionsTabPage(wd));
    }

    /**
     * Set the trigger event for the trigger element
     *
     * @param event can be: On Create, On Update, On Delete
     * @return instance of the Rule Editor page
     */
    @Step
    public RuleEditorPage setTriggerEvent(TriggerEvent event) {
        WebElement eventCheckbox = getElement(String.format(triggerEventCheckbox, event.getEvent()));
        if (!eventCheckbox.isSelected()) {
            click(eventCheckbox);
        }
        return this;
    }

    @Step
    public RuleEditorPage deselectTriggerEvent(TriggerEvent event) {
        WebElement eventCheckbox = getElement(String.format(triggerEventCheckbox, event.getEvent()));
        if (eventCheckbox.isSelected()) {
            click(eventCheckbox);
        }
        return this;
    }

    @Step
    public RuleEditorPage selectPrimaryRecordDefinition(String recordDefinitionName) {
        if (!waitForElementPresent(primaryRecordDefinition, 2)) {
            click(addRecordDefinitionButton);
        }
        WebUtils.selectDropdownValue(getElement(primaryRecordDefinition), recordDefinitionName);
        return this;
    }

    @Step
    public String getPrimaryRecordDefinitionName() {
        return getText(primaryRecordDefinition);
    }

    @Step
    public RuleEditorPage addRecordDefinition(String recordDefinitionName) {
        click(addRecordDefinitionButton);
        WebUtils.selectDropdownValue(getElement(lastRecordDefinitionDropdown), recordDefinitionName);
        return this;
    }

    /**
     * Finds desired {@ruleElement}, that is present (last dropped, if more than one with the same type of component were added )
     * on Canvas of Rule Designer, and based on that creates an instance of ActiveRuleComponent
     *
     * @param ruleAction element of Rule Designer
     * @return ActiveComponent rule element on Canvas
     */
    public ActiveRuleAction getDroppedComponent(RuleAction ruleAction) {
        log.info("Selecting of " + ruleAction.getName() + " on Canvas.");
        try {
            WebElement lastRuleElementOnCanvas = getElement(ruleAction.locatorOnCanvas());
            String ruleElementId = lastRuleElementOnCanvas.getAttribute("model-id");
            return new ActiveRuleAction(ruleAction, ruleElementId, this);
        } catch (NoSuchElementException e) {
            Assert.fail("There is no " + ruleAction.getName() + " rule element on Canvas.", e);
            return null;
        }
    }

    /**
     * Will get the last link on Canvas, and gets target and source elements for the link
     *
     * @return the last link on the Canvas
     */
    public RuleLink getLastLink() {
        try {
            String ruleElementId = getElement(lastLinkOnCanvas).getAttribute("model-id");
            String idOfSourceElement = getIdOfSourceElementOfLink(ruleElementId);
            String idOfTargetElement = getIdOfTargetElementOfLink(ruleElementId);
            ActiveRuleAction source = new ActiveRuleAction(getRuleElementById(idOfSourceElement), idOfSourceElement, this);
            ActiveRuleAction target = new ActiveRuleAction(getRuleElementById(idOfTargetElement), idOfTargetElement, this);
            return new RuleLink(wd, source, target, ruleElementId, this);
        } catch (NoSuchElementException e) {
            Assert.fail("There is no rule link on Canvas.", e);
            return null;
        }
    }

    /**
     * Gets id of the rule element that is source element of a link
     *
     * @param modelIdOfLink model-id of the link
     * @return id of the source element
     */
    private String getIdOfSourceElementOfLink(String modelIdOfLink) {
        return executeJS("return $('rx-designer-canvas').scope().paper.model.getCell('"
                + modelIdOfLink + "').prop('source/id');").toString();
    }

    /**
     * Gets id of the rule element that is target element of a link
     *
     * @param modelIdOfLink model-id of the link
     * @return id of the target element
     */
    private String getIdOfTargetElementOfLink(String modelIdOfLink) {
        return executeJS("return $('rx-designer-canvas').scope().paper.model.getCell('"
                + modelIdOfLink + "').prop('target/id');").toString();
    }

    public RuleAction getRuleElementById(String modelId) {
        String type = executeJS("return $('rx-designer-canvas').scope().paper.model.getCell('"
                + modelId + "').prop('type');").toString();
        if (type.equals("rx.RuleQualification")) {
            return RuleAction.RULE_QUALIFICATION;
        } else {
            String content = executeJS("return $('rx-designer-canvas').scope().paper.model.getCell('"
                    + modelId + "').prop('content');").toString();
            return RuleAction.getElementByName(content);
        }
    }

    public RuleEditorPage selectRuleElementOnCanvas(ActiveRuleAction activeRuleElement) {
        click(activeRuleElement.getXPath());
        return this;
    }

    public String getTriggerLabelOnCanvas() {
        String triggerOnCanvas = getDroppedComponent(RuleAction.TRIGGER).getXPath() + triggerLabelOnCanvas;
        String triggerEventInLabel = getText(triggerOnCanvas + "/*[1]" + textLineInLabel);
        String recordDefinitionInLabel = getText(triggerOnCanvas + "/*[2]" + textLineInLabel);
        return triggerEventInLabel + "\n" + recordDefinitionInLabel;
    }

    public String getElementLabelOnCanvas(ActiveRuleAction elementOnCanvas) {
        return getText(elementOnCanvas.getXPath());
    }

    public List<String> getTriggerEvents() {
        return getElements(triggerEvents).stream().map(WebElement::getText).collect(Collectors.toList());
    }

    @Step
    public List<Halo> getHaloAroundElement(RuleAction ruleAction) {
        return getElements(haloOfActiveElement).stream().filter(WebElement::isDisplayed).map(haloElement ->
                Halo.get(getAttr(haloElement, "data-action"))).collect(Collectors.toList());
    }

    @Step
    public ActiveRuleAction dragAndDropElement(boolean shouldBeConnected, RuleAction element) {
        ActiveRuleAction droppedToCanvasElement = null;
        if (shouldBeConnected) {
            dragAndDrop(element.getXpathOnPalette(), canvas);
            droppedToCanvasElement = getDroppedComponent(element);
            assertEquals(getLastLink().getTargetElement().getRuleElementId(),
                    droppedToCanvasElement.getRuleElementId(), "Elements were not connected.");
        } else {
            dragAndDrop(element.getXpathOnPalette(), canvas);
        }
        return droppedToCanvasElement;
    }

    @Step
    public ActiveRuleAction dragAndDropElement(RuleAction elements) {
        return dragAndDropElement(true, elements);
    }

    @Step
    public RuleEditorPage deleteElement(ActiveRuleAction element) {
        click(element.getXPath());
        click(Halo.REMOVE.getHaloPath());
        return this;
    }

    @Step
    public boolean isRuleElementPresent(ActiveRuleAction element) {
        return waitForElementPresent(element.getXPath(), 2);
    }

    @Step
    public WebElement getWorkflowContainer() {
        return getElement(viewPort);
    }

    @Step
    public void clickOnFreeSpaceOnCanvas() {
        click(canvasFreeSpace);
    }

    @Step
    public PropertyTab getInspector() {
        return new PropertyTab(wd, "element");
    }
}